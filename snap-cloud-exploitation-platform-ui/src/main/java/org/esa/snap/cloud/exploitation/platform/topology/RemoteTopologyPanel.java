package org.esa.snap.cloud.exploitation.platform.topology;

import org.apache.commons.lang.StringUtils;
import org.esa.snap.cloud.exploitation.platform.RemoteMachineCredentials;
import org.esa.snap.ui.loading.CustomFileChooser;
import org.esa.snap.ui.loading.ILoadingIndicator;
import org.esa.snap.ui.loading.IMessageDialog;
import org.esa.snap.ui.loading.SwingUtils;
import org.esa.snap.ui.UIUtils;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;

/**
 * Created by jcoravu on 9/1/2019.
 */
public abstract class RemoteTopologyPanel extends JPanel {

    private final Window parentWindow;
    private final JTextField remoteSharedFolderURLTextField;
    private final JTextField remoteUsernameTextField;
    private final JPasswordField remotePasswordTextField;
    private final JTextField localSharedFolderPathTextField;
    private final JList<RemoteMachineCredentials> remoteMachinesList;
    private Path lastSelectedFolderPath;

    public RemoteTopologyPanel(Window parentWindow, Insets defaultTextFieldMargins, Insets defaultListItemMargins) {
        super(new GridBagLayout());

        this.parentWindow = parentWindow;

        this.remoteSharedFolderURLTextField = new JTextField();
        this.remoteSharedFolderURLTextField.setMargin(defaultTextFieldMargins);

        this.remoteUsernameTextField = new JTextField();
        this.remoteUsernameTextField.setMargin(defaultTextFieldMargins);

        this.remotePasswordTextField = new JPasswordField();
        this.remotePasswordTextField.setMargin(defaultTextFieldMargins);

        this.localSharedFolderPathTextField = new JTextField();
        this.localSharedFolderPathTextField.setMargin(defaultTextFieldMargins);

        this.remoteMachinesList = new JList<RemoteMachineCredentials>(new DefaultListModel<RemoteMachineCredentials>());
        this.remoteMachinesList.setVisibleRowCount(15);
        this.remoteMachinesList.setCellRenderer(new OperatingSystemLabelListCellRenderer(defaultListItemMargins));
    }

    public abstract String normalizePath(String path);

    public abstract void addComponents(int gapBetweenColumns, int gapBetweenRows, boolean addToolbarButtons, boolean addSharedFolderBrowseButton);

    public abstract void mountLocalSharedFolderAsync(IMessageDialog parentWindow, ILoadingIndicator loadingIndicator, int threadId, IMountLocalSharedFolderCallback callback);

    public JList<RemoteMachineCredentials> getRemoteMachinesList() {
        return remoteMachinesList;
    }

    public JPasswordField getRemotePasswordTextField() {
        return remotePasswordTextField;
    }

    public JTextField getRemoteSharedFolderURLTextField() {
        return remoteSharedFolderURLTextField;
    }

    public JTextField getRemoteUsernameTextField() {
        return remoteUsernameTextField;
    }

    public void setSharedComponentsEnabled(boolean enabled) {
        this.remoteSharedFolderURLTextField.setEnabled(enabled);
        this.remoteUsernameTextField.setEnabled(enabled);
        this.remotePasswordTextField.setEnabled(enabled);
        this.localSharedFolderPathTextField.setEnabled(enabled);
    }

    protected void addSharedFolderURLRow(int rowIndex, int gapBetweenColumns, int gapBetweenRows, boolean browseButtonVisible) {
        int columnSpan = (browseButtonVisible) ? 1 : 2;

        GridBagConstraints c = SwingUtils.buildConstraints(0, rowIndex, GridBagConstraints.NONE, GridBagConstraints.WEST, 1, 1, gapBetweenRows, 0);
        add(new JLabel("Remote shared folder path"), c);
        c = SwingUtils.buildConstraints(1, rowIndex, GridBagConstraints.HORIZONTAL, GridBagConstraints.WEST, columnSpan, 1, gapBetweenRows, gapBetweenColumns);
        add(this.remoteSharedFolderURLTextField, c);
        if (browseButtonVisible) {
            ActionListener browseSharedFolderButtonListener = new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent event) {
                    Path selectedFolderPath = showDialogToSelectFolder(remoteSharedFolderURLTextField.getText());
                    if (selectedFolderPath != null) {
                        remoteSharedFolderURLTextField.setText(selectedFolderPath.toString());
                    }
                }
            };
            JButton browseButton = SwingUtils.buildBrowseButton(browseSharedFolderButtonListener, getTextFieldPreferredHeight());
            c = SwingUtils.buildConstraints(2, rowIndex, GridBagConstraints.NONE, GridBagConstraints.WEST, 1, 1, gapBetweenRows, gapBetweenColumns);
            add(browseButton, c);
        }
    }

    public JTextField getLocalSharedFolderPathTextField() {
        return this.localSharedFolderPathTextField;
    }

    public JPasswordField getLocalPasswordTextField() {
        return null;
    }

    public void setRemoteTopology(RemoteTopology remoteTopology) {
        this.remoteSharedFolderURLTextField.setText(normalizePath(remoteTopology.getRemoteSharedFolderURL()));
        this.remoteUsernameTextField.setText(remoteTopology.getRemoteUsername());
        this.remotePasswordTextField.setText(remoteTopology.getRemotePassword());
        this.localSharedFolderPathTextField.setText(normalizePath(remoteTopology.getLocalSharedFolderPath()));

        DefaultListModel<RemoteMachineCredentials> model = (DefaultListModel<RemoteMachineCredentials>) this.remoteMachinesList.getModel();
        model.removeAllElements();
        List<RemoteMachineCredentials> remoteMachines = remoteTopology.getRemoteMachines();
        for (int i = 0; i < remoteMachines.size(); i++) {
            model.addElement(remoteMachines.get(i));
        }
    }

    protected void addUsernameRow(int rowIndex, int gapBetweenColumns, int gapBetweenRows) {
        GridBagConstraints c = SwingUtils.buildConstraints(0, rowIndex, GridBagConstraints.NONE, GridBagConstraints.WEST, 1, 1, gapBetweenRows, 0);
        add(new JLabel("Remote username"), c);
        c = SwingUtils.buildConstraints(1, rowIndex, GridBagConstraints.HORIZONTAL, GridBagConstraints.WEST, 2, 1, gapBetweenRows, gapBetweenColumns);
        add(this.remoteUsernameTextField, c);
    }

    protected void addPasswordRow(int rowIndex, int gapBetweenColumns, int gapBetweenRows) {
        GridBagConstraints c = SwingUtils.buildConstraints(0, rowIndex, GridBagConstraints.NONE, GridBagConstraints.WEST, 1, 1, gapBetweenRows, 0);
        add(new JLabel("Remote password"), c);
        c = SwingUtils.buildConstraints(1, rowIndex, GridBagConstraints.HORIZONTAL, GridBagConstraints.WEST, 2, 1, gapBetweenRows, gapBetweenColumns);
        add(this.remotePasswordTextField, c);
    }

    protected void addRemoteMachinesRow(int rowIndex, int gapBetweenColumns, int gapBetweenRows, boolean addToolbarButtons) {
        GridBagConstraints c = SwingUtils.buildConstraints(0, rowIndex, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1, 1, gapBetweenRows, 0);
        add(new JLabel("Remote machines"), c);

        int columnSpan = 2;
        if (addToolbarButtons) {
            columnSpan = 1;
            ActionListener addButtonListener = new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent event) {
                    addServerCredentialsButtonPressed();
                }
            };
            ActionListener editButtonListener = new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent event) {
                    editServerCredentialsButtonPressed();
                }
            };
            ActionListener removeButtonListener = new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent event) {
                    removeServerCredentialsButtonPressed();
                }
            };
            JPanel remoteMachinesButtonsPanel = buildVerticalButtonsPanel(addButtonListener, editButtonListener, removeButtonListener, getTextFieldPreferredHeight(), gapBetweenRows);

            c = SwingUtils.buildConstraints(2, rowIndex, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1, 1, gapBetweenRows, gapBetweenColumns);
            add(remoteMachinesButtonsPanel, c);
        }

        c = SwingUtils.buildConstraints(1, rowIndex, GridBagConstraints.BOTH, GridBagConstraints.WEST, columnSpan, 1, gapBetweenRows, gapBetweenColumns);
        add(new JScrollPane(this.remoteMachinesList), c);
    }

    protected int getTextFieldPreferredHeight() {
        return this.remoteSharedFolderURLTextField.getPreferredSize().height;
    }

    private void addServerCredentialsButtonPressed() {
        EditRemoteMachineCredentialsDialog dialog = new EditRemoteMachineCredentialsDialog(this.parentWindow, null) {
            @Override
            protected void successfullyCloseDialog(RemoteMachineCredentials oldSSHServerCredentials, RemoteMachineCredentials newSSHServerCredentials) {
                super.successfullyCloseDialog(oldSSHServerCredentials, newSSHServerCredentials);

                addSSHServerCredentialItem(newSSHServerCredentials);
            }
        };
        dialog.show();
    }

    private void addSSHServerCredentialItem(RemoteMachineCredentials newSSHServerCredentials) {
        DefaultListModel<RemoteMachineCredentials> model = (DefaultListModel<RemoteMachineCredentials>)this.remoteMachinesList.getModel();
        model.addElement(newSSHServerCredentials);
    }

    private void editSSHServerCredentialItem(RemoteMachineCredentials oldSSHServerCredentials, RemoteMachineCredentials newSSHServerCredentials) {
        DefaultListModel<RemoteMachineCredentials> model = (DefaultListModel<RemoteMachineCredentials>)this.remoteMachinesList.getModel();
        for (int i=0; i<model.size(); i++) {
            RemoteMachineCredentials existingServer = model.getElementAt(i);
            if (existingServer == oldSSHServerCredentials) {
                model.setElementAt(newSSHServerCredentials, i);
                break;
            }
        }
    }

    private void editServerCredentialsButtonPressed() {
        RemoteMachineCredentials selectedSSHServerCredentials = this.remoteMachinesList.getSelectedValue();
        if (selectedSSHServerCredentials != null) {
            EditRemoteMachineCredentialsDialog dialog = new EditRemoteMachineCredentialsDialog(this.parentWindow, selectedSSHServerCredentials) {
                @Override
                protected void successfullyCloseDialog(RemoteMachineCredentials oldSSHServerCredentials, RemoteMachineCredentials newSSHServerCredentials) {
                    super.successfullyCloseDialog(oldSSHServerCredentials, newSSHServerCredentials);

                    editSSHServerCredentialItem(oldSSHServerCredentials, newSSHServerCredentials);
                }
            };
            dialog.show();
        }
    }

    protected void addLocalSharedFolderRow(int rowIndex, int gapBetweenColumns, int gapBetweenRows, boolean browseButtonVisible, String labelText) {
        int columnSpan = (browseButtonVisible) ? 1 : 2;

        GridBagConstraints c = SwingUtils.buildConstraints(0, rowIndex, GridBagConstraints.NONE, GridBagConstraints.WEST, 1, 1, gapBetweenRows, 0);
        add(new JLabel(labelText), c);
        c = SwingUtils.buildConstraints(1, rowIndex, GridBagConstraints.HORIZONTAL, GridBagConstraints.WEST, columnSpan, 1, gapBetweenRows, gapBetweenColumns);
        add(this.localSharedFolderPathTextField, c);

        if (browseButtonVisible) {
            ActionListener browseSharedFolderButtonListener = new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent event) {
                    Path selectedFolderPath = showDialogToSelectFolder(localSharedFolderPathTextField.getText());
                    if (selectedFolderPath != null) {
                        localSharedFolderPathTextField.setText(selectedFolderPath.toString());
                    }
                }
            };
            JButton browseButton = SwingUtils.buildBrowseButton(browseSharedFolderButtonListener, getTextFieldPreferredHeight());
            c = SwingUtils.buildConstraints(2, rowIndex, GridBagConstraints.NONE, GridBagConstraints.WEST, 1, 1, gapBetweenRows, gapBetweenColumns);
            add(browseButton, c);
        }
    }

    private void removeServerCredentialsButtonPressed() {
        int selectedIndex = this.remoteMachinesList.getSelectedIndex();
        if (selectedIndex >= 0) {
            DefaultListModel<RemoteMachineCredentials> model = (DefaultListModel<RemoteMachineCredentials>)this.remoteMachinesList.getModel();
            model.removeElementAt(selectedIndex);
        }
    }

    private Path showDialogToSelectFolder(String existingFolderPath) {
        CustomFileChooser fileChooser = CustomFileChooser.buildFileChooser("Select folder", false, JFileChooser.DIRECTORIES_ONLY);
        fileChooser.setAcceptAllFileFilterUsed(false);
        Path currentDirectoryPath;
        if (StringUtils.isBlank(existingFolderPath)) {
            currentDirectoryPath = this.lastSelectedFolderPath;
        } else {
            currentDirectoryPath = Paths.get(existingFolderPath);
        }
        if (currentDirectoryPath != null) {
            fileChooser.setCurrentDirectoryPath(currentDirectoryPath);
        }

        int result = fileChooser.showDialog(this.parentWindow, "Select");
        if (result == JFileChooser.APPROVE_OPTION) {
            this.lastSelectedFolderPath = fileChooser.getSelectedPath();
            return this.lastSelectedFolderPath;
        }
        return null;
    }

    private static JButton buildButton(String resourceImagePath, ActionListener buttonListener, Dimension buttonSize) {
        ImageIcon icon = UIUtils.loadImageIcon(resourceImagePath);
        JButton button = new JButton(icon);
        button.setFocusable(false);
        button.addActionListener(buttonListener);
        button.setPreferredSize(buttonSize);
        button.setMinimumSize(buttonSize);
        button.setMaximumSize(buttonSize);
        return button;
    }

    private static JPanel buildVerticalButtonsPanel(ActionListener addButtonListener, ActionListener editButtonListener, ActionListener removeButtonListener,
                                                    int textFieldPreferredHeight, int gapBetweenRows) {

        Dimension buttonSize = new Dimension(textFieldPreferredHeight, textFieldPreferredHeight);

        JPanel verticalButtonsPanel = new JPanel();
        verticalButtonsPanel.setLayout(new BoxLayout(verticalButtonsPanel, BoxLayout.Y_AXIS));

        JButton addButton = buildButton("icons/Add16.png", addButtonListener, buttonSize);
        verticalButtonsPanel.add(addButton);

        verticalButtonsPanel.add(Box.createVerticalStrut(gapBetweenRows));

        JButton editButton = buildButton("icons/Edit16.gif", editButtonListener, buttonSize);
        verticalButtonsPanel.add(editButton);

        verticalButtonsPanel.add(Box.createVerticalStrut(gapBetweenRows));

        JButton removeButton = buildButton("icons/Remove16.png", removeButtonListener, buttonSize);
        verticalButtonsPanel.add(removeButton);

        return verticalButtonsPanel;
    }
}
