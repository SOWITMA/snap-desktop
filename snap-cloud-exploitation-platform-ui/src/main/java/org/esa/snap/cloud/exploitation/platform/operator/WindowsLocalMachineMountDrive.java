package org.esa.snap.cloud.exploitation.platform.operator;

import org.apache.commons.lang.StringUtils;
import org.esa.snap.cloud.exploitation.platform.CloudExploitationPlatformOp;
import org.esa.snap.ui.loading.ILoadingIndicator;
import org.esa.snap.cloud.exploitation.platform.topology.IUnmountLocalSharedFolderCallback;

import java.io.IOException;

/**
 * Created by jcoravu on 1/3/2019.
 */
public class WindowsLocalMachineMountDrive implements IMountLocalSharedFolderResult {

    private final String localSharedDrive;
    private final boolean mountedSharedDrive;

    public WindowsLocalMachineMountDrive(String localSharedDrive, boolean mountedSharedDrive) {
        this.localSharedDrive = localSharedDrive;
        this.mountedSharedDrive = mountedSharedDrive;
    }

    @Override
    public void unmountLocalSharedFolderAsync(ILoadingIndicator loadingIndicator, int threadId, IUnmountLocalSharedFolderCallback callback) {
        if (canUnmountLocalSharedDrive()) {
            UnmountWindowsLocalDriveTimerRunnable runnable = new UnmountWindowsLocalDriveTimerRunnable(loadingIndicator, threadId, this.localSharedDrive, callback);
            runnable.executeAsync();
        } else {
            callback.onFinishUnmountingLocalFolder(null);
        }
    }

    @Override
    public void unmountLocalSharedFolder(String currentLocalSharedDrive, String currentLocalPassword) throws IOException {
        if (canUnmountLocalSharedDrive()) {
            CloudExploitationPlatformOp.unmountWindowsLocalDrive(this.localSharedDrive);
        }

//        String oldLocalSharedDrive = StringUtils.isBlank(this.localSharedDrive) ? "" : this.localSharedDrive;
//        String newLocalSharedDrive = StringUtils.isBlank(currentLocalSharedDrive) ? "" : currentLocalSharedDrive;
//        if (oldLocalSharedDrive.equalsIgnoreCase(newLocalSharedDrive)) {
//            // the same local shared drive
//            if (canUnmountLocalSharedDrive()) {
//                CloudExploitationPlatformOp.unmountWindowsLocalDrive(this.localSharedDrive);
//            }
//        } else {
//            throw new IllegalArgumentException("The current local shared drive is different. The old drive is '"+oldLocalSharedDrive+"' and the new drive is '"+newLocalSharedDrive+"'.");
//        }
    }

    private boolean canUnmountLocalSharedDrive() {
        return (!StringUtils.isBlank(this.localSharedDrive) && this.mountedSharedDrive);
    }
}
