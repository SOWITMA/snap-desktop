package org.esa.snap.cloud.exploitation.platform.topology;

import org.apache.commons.lang.SystemUtils;
import org.esa.snap.cloud.exploitation.platform.RemoteMachineCredentials;
import org.esa.snap.ui.loading.AbstractModalDialog;
import org.esa.snap.ui.loading.ILoadingIndicator;

import javax.swing.*;
import java.awt.Dimension;
import java.awt.Insets;
import java.awt.Window;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.nio.file.Path;

/**
 * Created by jcoravu on 17/12/2018.
 */
public class RemoteTopologyDialog extends AbstractModalDialog {

    static final String REMOTE_TOPOLOGY_FILE_NAME = "remote-topology.json";

    private RemoteTopologyPanel remoteTopologyPanel;

    public RemoteTopologyDialog(Window parent, String title) {
        super(parent, title, true, null);
    }

    @Override
    protected final void onAboutToShow() {
        JDialog dialog = getJDialog();
        dialog.setMinimumSize(new Dimension(450, 350));

        ILoadingIndicator loadingIndicator = getLoadingIndicator();
        int threadId = getNewCurrentThreadId();
        Path remoteTopologyFilePath = getRemoteTopologyFilePath();
        ReadRemoteTopologyTimerRunnable runnable = new ReadRemoteTopologyTimerRunnable(this, loadingIndicator, threadId, remoteTopologyFilePath) {
            @Override
            protected void onSuccessfullyFinish(RemoteTopology remoteTopology) {
                onFinishReadingRemoteTopology(remoteTopology);
            }
        };
        runnable.executeAsync();
    }

    @Override
    protected JPanel buildContentPanel(int gapBetweenColumns, int gapBetweenRows) {
        Insets defaultTextFieldMargins = buildDefaultTextFieldMargins();
        Insets defaultListItemMargins = buildDefaultListItemMargins();
        if (SystemUtils.IS_OS_LINUX) {
            this.remoteTopologyPanel = new LinuxRemoteTopologyPanel(getJDialog(), defaultTextFieldMargins, defaultListItemMargins);
        } else if (SystemUtils.IS_OS_WINDOWS) {
            this.remoteTopologyPanel = new WindowsRemoteTopologyPanel(getJDialog(), defaultTextFieldMargins, defaultListItemMargins);
        } else if (SystemUtils.IS_OS_MAC) {
            this.remoteTopologyPanel = new MacRemoteTopologyPanel(getJDialog(), defaultTextFieldMargins, defaultListItemMargins);
        } else {
            throw new UnsupportedOperationException("Unsupported operating system '" + SystemUtils.OS_NAME + "'.");
        }
        this.remoteTopologyPanel.addComponents(gapBetweenColumns, gapBetweenRows, true, true);
        return remoteTopologyPanel;
    }

    @Override
    protected JPanel buildButtonsPanel(ActionListener cancelActionListener) {
        ActionListener saveActionListener = new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent event) {
                saveButtonPressed();
            }
        };
        return buildButtonsPanel("Save", saveActionListener, "Cancel", cancelActionListener);
    }

    private void saveButtonPressed() {
        DefaultListModel<RemoteMachineCredentials> model = (DefaultListModel<RemoteMachineCredentials>)this.remoteTopologyPanel.getRemoteMachinesList().getModel();
        if (model.size() > 0) {
            String remoteSharedFolderURL = this.remoteTopologyPanel.getRemoteSharedFolderURLTextField().getText().trim();
            String remoteUsername = this.remoteTopologyPanel.getRemoteUsernameTextField().getText();
            String remotePassword = new String(this.remoteTopologyPanel.getRemotePasswordTextField().getPassword());
            String localSharedFolderPath = this.remoteTopologyPanel.getLocalSharedFolderPathTextField().getText().trim();

            String localPassword = null;
            JPasswordField localPasswordTextField = this.remoteTopologyPanel.getLocalPasswordTextField();
            if (localPasswordTextField != null) {
                localPassword = new String(localPasswordTextField.getPassword());
            }

            RemoteTopology remoteTopology = new RemoteTopology(remoteSharedFolderURL, remoteUsername, remotePassword);
            remoteTopology.setLocalMachineData(localSharedFolderPath, localPassword);

            for (int i=0; i<model.size(); i++) {
                remoteTopology.addRemoteMachine(model.getElementAt(i));
            }

            ILoadingIndicator loadingIndicator = getLoadingIndicator();
            int threadId = getNewCurrentThreadId();
            Path remoteTopologyFilePath = getRemoteTopologyFilePath();
            WriteRemoteTopologyTimerRunnable runnable = new WriteRemoteTopologyTimerRunnable(this, loadingIndicator, threadId, remoteTopology, remoteTopologyFilePath);
            runnable.executeAsync();
        }
    }

    private void onFinishReadingRemoteTopology(RemoteTopology remoteTopology) {
        if (remoteTopology != null) {
            this.remoteTopologyPanel.setRemoteTopology(remoteTopology);
        }
    }

    public static Path getRemoteTopologyFilePath() {
        Path cepFolderPath = org.esa.snap.core.util.SystemUtils.getApplicationDataDir().toPath().resolve("cloud-exploitation-platform");
        return cepFolderPath.resolve(RemoteTopologyDialog.REMOTE_TOPOLOGY_FILE_NAME);
    }
}
