
package org.esa.snap.cloud.exploitation.platform.operator;

import org.esa.snap.cloud.exploitation.platform.CloudExploitationPlatformOp;
import org.esa.snap.cloud.exploitation.platform.UnixMountLocalFolderResult;
import org.esa.snap.ui.loading.AbstractTimerRunnable;
import org.esa.snap.ui.loading.ILoadingIndicator;
import org.esa.snap.ui.loading.IMessageDialog;
import org.esa.snap.cloud.exploitation.platform.topology.IMountLocalSharedFolderCallback;

public class MountMacLocalFolderTimerRunnable extends AbstractTimerRunnable<UnixMountLocalFolderResult> {

    private final IMessageDialog parentWindow;

    protected final String remoteSharedFolderURL;
    protected final String remoteUsername;
    protected final String remotePassword;
    protected final String localSharedFolderPath;
    protected final IMountLocalSharedFolderCallback callback;

    public MountMacLocalFolderTimerRunnable(IMessageDialog parentWindow, ILoadingIndicator loadingIndicator, int threadId,
                                            String remoteSharedFolderURL, String remoteUsername, String remotePassword,
                                            String localSharedFolderPath, IMountLocalSharedFolderCallback callback) {

        super(loadingIndicator, threadId, 500);

        this.parentWindow = parentWindow;
        this.remoteSharedFolderURL = remoteSharedFolderURL;
        this.remoteUsername = remoteUsername;
        this.remotePassword = remotePassword;
        this.localSharedFolderPath = localSharedFolderPath;
        this.callback = callback;
    }

    @Override
    protected final void onTimerWakeUp(String messageToDisplay) {
        super.onTimerWakeUp("Mounting local shared folder...");
    }

    @Override
    protected final String getExceptionLoggingMessage() {
        return "Failed to mount the local shared folder '"+this.localSharedFolderPath+"'.";
    }

    @Override
    protected final void onFailed(Exception exception) {
        showErrorDialog();
    }

    @Override
    protected void onSuccessfullyFinish(UnixMountLocalFolderResult result) {
        if (result.isSharedFolderMounted()) {
            this.callback.onSuccessfullyFinishMountingLocalFolder(new MacLocalMachineMountFolder(this.localSharedFolderPath, result));
        } else {
            showErrorDialog();
        }
    }

    @Override
    protected UnixMountLocalFolderResult execute() throws Exception {
        return CloudExploitationPlatformOp.mountMacLocalFolder(this.remoteSharedFolderURL, this.remoteUsername, this.remotePassword, this.localSharedFolderPath);
    }

    protected final void showErrorDialog() {
        this.parentWindow.showErrorDialog("Failed to mount the local shared folder '"+this.localSharedFolderPath+"'.", "Failed");
    }
}
