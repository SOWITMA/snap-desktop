package org.esa.snap.cloud.exploitation.platform.operator;

import org.esa.snap.cloud.exploitation.platform.CloudExploitationPlatformOp;
import org.esa.snap.cloud.exploitation.platform.UnixMountLocalFolderResult;
import org.esa.snap.ui.loading.ILoadingIndicator;
import org.esa.snap.cloud.exploitation.platform.topology.IUnmountLocalSharedFolderCallback;

import java.io.IOException;

/**
 * Created by jcoravu on 1/3/2019.
 */
public class LinuxLocalMachineMountFolder implements IMountLocalSharedFolderResult {

    private final String localSharedFolderPath;
    private final String localPassword;
    private final UnixMountLocalFolderResult localMachineLinuxMountFolder;

    public LinuxLocalMachineMountFolder(String localSharedFolderPath, String localPassword, UnixMountLocalFolderResult localMachineLinuxMountFolder) {
        this.localSharedFolderPath = localSharedFolderPath;
        this.localPassword = localPassword;
        this.localMachineLinuxMountFolder = localMachineLinuxMountFolder;
    }

    @Override
    public void unmountLocalSharedFolderAsync(ILoadingIndicator loadingIndicator, int threadId, IUnmountLocalSharedFolderCallback callback) {
        if (canUnmountLocalSharedFolder()) {
            UnmountLinuxLocalFolderTimerRunnable runnable = new UnmountLinuxLocalFolderTimerRunnable(loadingIndicator, threadId, this.localSharedFolderPath,
                                                                                            this.localPassword, this.localMachineLinuxMountFolder, callback);
            runnable.executeAsync();
        } else {
            callback.onFinishUnmountingLocalFolder(null);
        }
    }

    @Override
    public void unmountLocalSharedFolder(String currentLocalSharedFolderPath, String currentLocalPassword) throws IOException {
        if (canUnmountLocalSharedFolder()) {
            CloudExploitationPlatformOp.unmountLinuxLocalFolder(this.localSharedFolderPath, this.localPassword, this.localMachineLinuxMountFolder);
        }

//        String oldLocalSharedFolderPath = StringUtils.isBlank(this.localSharedFolderPath) ? "" : this.localSharedFolderPath;
//        String newLocalSharedFolderPath = StringUtils.isBlank(currentLocalSharedFolderPath) ? "" : currentLocalSharedFolderPath;
//
//        String oldLocalPassword = StringUtils.isBlank(this.localPassword) ? "" : this.localPassword;
//        String newLocalPassword = StringUtils.isBlank(currentLocalPassword) ? "" : currentLocalPassword;
//
//        if (oldLocalSharedFolderPath.equals(newLocalSharedFolderPath) && oldLocalPassword.equals(newLocalPassword)) {
//            // the same local shared folder path and local password
//            if (canUnmountLocalSharedFolder()) {
//                CloudExploitationPlatformOp.unmountLinuxLocalFolder(this.localSharedFolderPath, this.localPassword, this.localMachineLinuxMountFolder);
//            }
//        } else {
//            throw new IllegalArgumentException("The current local shared folder or current local password are different.");
//        }
    }

    private boolean canUnmountLocalSharedFolder() {
        return (this.localMachineLinuxMountFolder.isSharedFolderCreated() || this.localMachineLinuxMountFolder.isSharedFolderMounted());
    }
}
