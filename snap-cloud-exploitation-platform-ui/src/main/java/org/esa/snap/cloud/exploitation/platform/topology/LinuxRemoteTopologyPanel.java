package org.esa.snap.cloud.exploitation.platform.topology;

import org.esa.snap.ui.loading.ILoadingIndicator;
import org.esa.snap.ui.loading.IMessageDialog;
import org.esa.snap.ui.loading.SwingUtils;
import org.esa.snap.cloud.exploitation.platform.operator.MountLinuxLocalFolderTimerRunnable;

import javax.swing.*;
import java.awt.*;

public class LinuxRemoteTopologyPanel extends RemoteTopologyPanel {

    private final JPasswordField localPasswordTextField;

    public LinuxRemoteTopologyPanel(Window parentWindow, Insets defaultTextFieldMargins, Insets defaultListItemMargins) {
        super(parentWindow, defaultTextFieldMargins, defaultListItemMargins);

        this.localPasswordTextField = new JPasswordField();
        this.localPasswordTextField.setMargin(defaultTextFieldMargins);
    }

    @Override
    public String normalizePath(String path) {
        return path.replace('\\', '/');
    }

    @Override
    public void setSharedComponentsEnabled(boolean enabled) {
        super.setSharedComponentsEnabled(enabled);

        this.localPasswordTextField.setEnabled(enabled);
    }

    @Override
    public JPasswordField getLocalPasswordTextField() {
        return this.localPasswordTextField;
    }

    @Override
    public void setRemoteTopology(RemoteTopology remoteTopology) {
        super.setRemoteTopology(remoteTopology);

        this.localPasswordTextField.setText(remoteTopology.getLocalPassword());
    }

    @Override
    public void mountLocalSharedFolderAsync(IMessageDialog parentWindow, ILoadingIndicator loadingIndicator, int threadId, IMountLocalSharedFolderCallback callback) {
        String remoteSharedFolderURL = getRemoteSharedFolderURLTextField().getText();
        String remoteUsername = getRemoteUsernameTextField().getText();
        String remotePassword = new String(getRemotePasswordTextField().getPassword());
        String localSharedFolderPath = getLocalSharedFolderPathTextField().getText();
        String localPassword = new String(this.localPasswordTextField.getPassword());
        MountLinuxLocalFolderTimerRunnable runnable = new MountLinuxLocalFolderTimerRunnable(parentWindow, loadingIndicator, threadId, remoteSharedFolderURL, remoteUsername,
                                                                                             remotePassword, localSharedFolderPath, localPassword, callback);
        runnable.executeAsync();
    }

    public void addComponents(int gapBetweenColumns, int gapBetweenRows, boolean addToolbarButtons, boolean addSharedFolderBrowseButton) {
        addSharedFolderURLRow(0, gapBetweenColumns, 0,false);
        addUsernameRow(1, gapBetweenColumns, gapBetweenRows);
        addPasswordRow(2, gapBetweenColumns, gapBetweenRows);
        addLocalSharedFolderRow(3, gapBetweenColumns, gapBetweenRows, addSharedFolderBrowseButton, "Local shared folder path");
        addLocalPasswordRow(4, gapBetweenColumns, gapBetweenRows);
        addRemoteMachinesRow(5, gapBetweenColumns, gapBetweenRows, addToolbarButtons);
    }

    protected void addLocalPasswordRow(int rowIndex, int gapBetweenColumns, int gapBetweenRows) {
        GridBagConstraints c = SwingUtils.buildConstraints(0, rowIndex, GridBagConstraints.NONE, GridBagConstraints.WEST, 1, 1, gapBetweenRows, 0);
        add(new JLabel("Local password"), c);
        c = SwingUtils.buildConstraints(1, rowIndex, GridBagConstraints.HORIZONTAL, GridBagConstraints.WEST, 2, 1, gapBetweenRows, gapBetweenColumns);
        add(this.localPasswordTextField, c);
    }
}
